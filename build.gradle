allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    
    repositories {
        mavenCentral()
    }
    
    group 'com.miragesql'
    version '3.0.0'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    
    tasks.withType(Javadoc) {
        failOnError = false
    }

    tasks.jar {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-Date': new Date().format('yyyy-MM-dd'),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion,
                'Target-JDK': project.targetCompatibility
            )
        }
    }

    tasks.register('javadocJar', Jar) {
        archiveClassifier.set('javadoc')
        from tasks.javadoc
    }
    
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    
    artifacts {
        archives tasks.named('javadocJar')
        archives tasks.named('sourcesJar')
    }
    
    publishing {
        repositories {
            maven {
                // URL for the release repository
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = project.findProperty("stUser") ?: ""
                    password = project.findProperty("stPwd") ?: ""
                }
            }

            maven {
                // URL for the snapshot repository
                url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                credentials {
                    username = project.findProperty("stUser") ?: ""
                    password = project.findProperty("stPwd") ?: ""
                }
            }

            mavenLocal()
        }
    }
    
    def configurePom = { MavenPublication publication ->
        publication.pom {
            name.set("${project.name.capitalize()} Library")
            description.set("Description for ${project.name.capitalize()}")
            url.set('https://github.com/mirage-sql/mirage')

            licenses {
                license {
                    name.set('The Apache License, Version 2.0')
                    url.set('http://www.apache.org/licenses/LICENSE-2.0.txt')
                }
            }

            developers {
                developer {
                    id.set('takezoe')
                    name.set('Naoki Takezoe')
                    email.set('takezoe_at_gmail.com')
                    url.set('http://d.hatena.ne.jp/takezoe/')
                    timezone.set('+9')
                }
                developer {
                    id.set('daisuke')
                    name.set('Daisuke Miyamoto')
                    email.set('dai.0304_at_gmail.com')
                    url.set('http://d.hatena.ne.jp/daisuke-m/')
                    timezone.set('+9')
                }
            }

            scm {
                connection.set('scm:git:https://github.com/mirage-sql/mirage.git')
                developerConnection.set('scm:git:https://github.com/mirage-sql/mirage.git')
                url.set('https://github.com/mirage-sql/mirage')
            }

            issueManagement {
                system.set('GitHub Issues')
                url.set('https://github.com/mirage-sql/mirage/issues')
            }
        }
    }

    afterEvaluate { project ->
        publishing {
            publications {
                all { publication ->
                    if (publication instanceof MavenPublication) {
                        configurePom(publication)
                    }
                }
            }
        }

        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }
}

publishing {
    publications {
        miragesql(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar
            artifact tasks.javadocJar
        }
    }
}

//displayName "Mirage-SQL"
description "Mirage-SQL is an easy and powerful SQL centric database access library for Java (or JVM based languages) which provides dynamic SQL templates in plain SQL files."

dependencies {
    implementation 'org.javassist:javassist:3.30.2-GA'
    implementation 'ognl:ognl:3.2.21'
    implementation 'org.slf4j:slf4j-api:1.7.36'

    implementation('commons-dbcp:commons-dbcp:1.4') {
        capabilities {
            requireCapability 'commons-dbcp:commons-dbcp:1.4'
        }
    }

    implementation('com.zaxxer:HikariCP:5.1.0') {
        capabilities {
            requireCapability 'com.zaxxer:HikariCP:5.1.0'
        }
    }

    compileOnly 'org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:4.0.4'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.apache.commons:commons-lang3:3.15.0'
    testImplementation 'com.h2database:h2:2.3.230'
    testImplementation 'org.hsqldb:hsqldb:2.7.3'

    testImplementation 'org.apache.groovy:groovy-all:4.0.22'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
}
